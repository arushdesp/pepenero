This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  client.js
  index.html
  style.css
config.js
config.json
dashboardRenderer.js
fileWatcher.js
notes.md
package.json
README.md
server.js
socket.js
tasks.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/client.js">
// client.js
// Fetch widgets, render dashboard, and handle live updates via WebSocket

const dashboard = document.getElementById('dashboard');

function render(widgets) {
  dashboard.innerHTML = '';
  widgets.forEach(widget => {
    const div = document.createElement('div');
    div.className = 'widget';
    div.innerHTML = `
      <div class="widget-title">${widget.title || widget.file}</div>
      <div class="widget-content">${widget.html}</div>
    `;
    dashboard.appendChild(div);
  });
}

// Initial fetch
fetch('/api/widgets')
  .then(res => res.json())
  .then(render);

// WebSocket for live updates
const protocol = location.protocol === 'https:' ? 'wss' : 'ws';
const ws = new WebSocket(`${protocol}://${location.host}`);
ws.onmessage = event => {
  const msg = JSON.parse(event.data);
  if (msg.type === 'update' || msg.type === 'init') {
    render(msg.widgets);
  }
};
</file>

<file path="public/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Markdown Dashboard</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <h1>üìã My Markdown Dashboard</h1>
  <div id="dashboard"></div>
  <script src="client.js"></script>
</body>
</html>
</file>

<file path="public/style.css">
body {
  font-family: system-ui, sans-serif;
  background: #f8f9fa;
  margin: 0;
  padding: 0 0 2rem 0;
}

h1 {
  text-align: center;
  margin: 1.5rem 0 1rem 0;
  font-size: 2rem;
}

#dashboard {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 1.5rem;
  padding: 1rem;
}

.widget {
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.07);
  padding: 1rem;
  min-width: 250px;
  max-width: 400px;
  flex: 1 1 300px;
  display: flex;
  flex-direction: column;
}

.widget-title {
  font-weight: bold;
  margin-bottom: 0.5rem;
  font-size: 1.1rem;
}

/* Theme and layout extension points below */
</file>

<file path="config.js">
// config.js
// Loads and validates config.json
import fs from 'fs';
import path from 'path';

const CONFIG_PATH = path.join(path.dirname(new URL(import.meta.url).pathname), 'config.json');

export function loadConfig() {
  if (!fs.existsSync(CONFIG_PATH)) {
    throw new Error('config.json not found. Please create one.');
  }
  const raw = fs.readFileSync(CONFIG_PATH, 'utf-8');
  let config;
  try {
    config = JSON.parse(raw);
  } catch (e) {
    throw new Error('Invalid config.json: ' + e.message);
  }
  // Basic validation
  if (!Array.isArray(config.widgets)) {
    throw new Error('config.json must have a widgets array.');
  }
  return config;
}
</file>

<file path="config.json">
{
  "port": 3000,
  "theme": "light",
  "widgets": [
    {
      "file": "notes.md",
      "title": "My Notes",
      "size": "medium"
    },
    {
      "file": "tasks.md",
      "title": "Tasks",
      "size": "small"
    }
  ]
}
</file>

<file path="dashboardRenderer.js">
// dashboardRenderer.js
// Transforms Markdown files to HTML widgets using marked
import fs from 'fs';
import { marked } from 'marked';

export function createDashboardRenderer(config) {
  // Load all widgets initially
  let widgets = config.widgets.map(w => loadWidget(w));

  function loadWidget(widgetConfig) {
    let content = '';
    try {
      content = fs.readFileSync(widgetConfig.file, 'utf-8');
    } catch (e) {
      content = '*File not found*';
    }
    return {
      ...widgetConfig,
      html: marked.parse(content)
    };
  }

  function reloadWidget(filePath) {
    widgets = widgets.map(w =>
      w.file === filePath ? loadWidget(w) : w
    );
  }

  function getWidgets() {
    return widgets;
  }

  return { getWidgets, reloadWidget };
}
</file>

<file path="fileWatcher.js">
// fileWatcher.js
// Watches Markdown files and notifies dashboard and WebSocket server on changes
import chokidar from 'chokidar';

export function startFileWatcher(config, dashboardRenderer, server) {
  const widgetFiles = config.widgets.map(w => w.file);
  const watcher = chokidar.watch(widgetFiles, { ignoreInitial: true });

  watcher.on('change', filePath => {
    dashboardRenderer.reloadWidget(filePath);
    // Notify WebSocket clients (emit event on server)
    server.emit('widgetChanged', filePath);
  });
}
</file>

<file path="notes.md">
# Notes

- This is your notes widget.
- Edit this file and see live updates!
</file>

<file path="package.json">
{
  "name": "pepenero",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "chokidar": "^4.0.3",
    "express": "^5.1.0",
    "marked": "^16.1.1",
    "ws": "^8.18.3"
  }
}
</file>

<file path="README.md">
# Markdown Dashboard

A fast, minimalist, local-first web application that turns a directory of Markdown files into a beautiful, auto-updating, customizable personal dashboard. Your own digital command center ‚Äî built entirely on your machine, respecting privacy, speed, and simplicity.

## üöÄ Features
- **Local File System as Source of Truth**: Reads content directly from your Markdown files. No cloud, no DB, no telemetry.
- **Single Page Dashboard**: Each widget = one Markdown file, styled and titled.
- **Live Updating**: Real-time updates via WebSocket when files change.
- **Configurable Layout**: Control display via `config.json`.
- **Clean, Modular Architecture**: Easy to extend and hack.

## üõ† Setup
1. Clone/download this repo.
2. `npm install`
3. Add your Markdown files (e.g., `notes.md`, `tasks.md`).
4. Edit `config.json` to list your widgets.
5. `node server.js`
6. Open [http://localhost:3000](http://localhost:3000)

## üìù Usage
- Edit your Markdown files ‚Äî dashboard updates instantly.
- Change `config.json` to add/remove/reorder widgets.

## ‚öôÔ∏è config.json Schema
```json
{
  "port": 3000,
  "theme": "light",
  "widgets": [
    {
      "file": "notes.md",
      "title": "My Notes",
      "size": "medium"
    },
    {
      "file": "tasks.md",
      "title": "Tasks",
      "size": "small"
    }
  ]
}
```
- `port`: (optional) Port to run the server.
- `theme`: (optional) Simple theme name.
- `widgets`: Array of widgets to display, in order.
  - `file`: Path to Markdown file.
  - `title`: Widget title.
  - `size`: (optional) Widget size preset.

## üìÇ Folder Structure
```
.
‚îú‚îÄ‚îÄ server.js
‚îú‚îÄ‚îÄ config.js
‚îú‚îÄ‚îÄ fileWatcher.js
‚îú‚îÄ‚îÄ dashboardRenderer.js
‚îú‚îÄ‚îÄ socket.js
‚îú‚îÄ‚îÄ config.json
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îú‚îÄ‚îÄ style.css
‚îÇ   ‚îî‚îÄ‚îÄ client.js
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md
```

## üí° Extension Ideas
- Support for CSV, JSON, plaintext widgets
- Custom widgets (quote-of-the-day, git log, uptime, etc.)
- CLI to append/edit notes
- Theming and layout customization
- Markdown extensions (e.g., ::todo, ==highlight==)
- Widget filters (e.g., only show TODOs)
- Drag-and-drop layout
- Syntax highlighting for code blocks
- Offline PWA support
- Local authentication

---
**Built for tinkerers and productivity nerds.**
</file>

<file path="server.js">
import express from 'express';
import path from 'path';
import http from 'http';
import { fileURLToPath } from 'url';
import { loadConfig } from './config.js';
import { startFileWatcher } from './fileWatcher.js';
import { createDashboardRenderer } from './dashboardRenderer.js';
import { startWebSocketServer } from './socket.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = http.createServer(app);

// Load config
const config = loadConfig();

// Serve static files
app.use(express.static(path.join(__dirname, 'public')));

// Dashboard renderer (returns HTML for all widgets)
const dashboardRenderer = createDashboardRenderer(config);

app.get('/api/widgets', (req, res) => {
  res.json(dashboardRenderer.getWidgets());
});

// Start file watcher and WebSocket server
startFileWatcher(config, dashboardRenderer, server);
startWebSocketServer(server, dashboardRenderer);

const PORT = config.port || 3000;
server.listen(PORT, () => {
  console.log(`Dashboard running at http://localhost:${PORT}`);
});
</file>

<file path="socket.js">
// socket.js
// WebSocket server for live updates
import WebSocket, { WebSocketServer } from 'ws';

export function startWebSocketServer(server, dashboardRenderer) {
  const wss = new WebSocketServer({ server });

  // Broadcast widget updates to all clients
  function broadcastWidgetUpdate(filePath) {
    const widgets = dashboardRenderer.getWidgets();
    wss.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({ type: 'update', widgets }));
      }
    });
  }

  // Listen for widget change events from fileWatcher
  server.on('widgetChanged', broadcastWidgetUpdate);

  wss.on('connection', ws => {
    // Send initial widgets
    ws.send(JSON.stringify({ type: 'init', widgets: dashboardRenderer.getWidgets() }));
  });
}
</file>

<file path="tasks.md">
# Tasks

- [ ] Try the dashboard
- [ ] Add your own widgets
- [x] Enjoy local-first productivity
</file>

</files>
